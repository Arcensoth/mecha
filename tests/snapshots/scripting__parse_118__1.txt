_mecha_lineno = [1, 10, 13], [1, 5, 6]
_mecha_helper_children = _mecha_runtime.helpers['children']
_mecha_helper_interpolate_message = _mecha_runtime.helpers['interpolate_message']
_mecha_helper_replace = _mecha_runtime.helpers['replace']
with _mecha_runtime.scope() as _mecha_var0:
    def f():
        yield 1
        yield 2
        yield 3
    for i in (
(
f)()):
        _mecha_runtime.commands.append(_mecha_helper_replace(_mecha_refs[1], arguments=_mecha_helper_children([(
_mecha_helper_interpolate_message((
i), _mecha_refs[0]))])))
_mecha_var1 = _mecha_helper_replace(_mecha_refs[2], commands=_mecha_helper_children(_mecha_var0))---
output = _mecha_var1
---
_mecha_refs[0]
<class 'mecha.contrib.scripting.ast.AstInterpolation'>
  location: SourceLocation(pos=67, lineno=6, colno=9)
  end_location: SourceLocation(pos=68, lineno=6, colno=10)
  converter: 'message'
  value:
    <class 'mecha.contrib.scripting.ast.AstIdentifier'>
_mecha_refs[1]
<class 'mecha.ast.AstCommand'>
  location: SourceLocation(pos=63, lineno=6, colno=5)
  end_location: SourceLocation(pos=68, lineno=6, colno=10)
  identifier: 'say:message'
  arguments:
    <class 'mecha.contrib.scripting.ast.AstInterpolation'>
_mecha_refs[2]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=69, lineno=7, colno=1)
  commands:
    <class 'mecha.ast.AstCommand'>
    <class 'mecha.ast.AstCommand'>
